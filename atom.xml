<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Monkey Café</title>
  
  <subtitle>Would you like a cup of coffee?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ouyang.xin/"/>
  <updated>2019-12-23T16:31:12.723Z</updated>
  <id>http://www.ouyang.xin/</id>
  
  <author>
    <name>欧阳欣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Topic Model简单指北</title>
    <link href="http://www.ouyang.xin/2019/12/15/TopicModel%E7%AE%80%E5%8D%95%E6%8C%87%E5%8C%97/"/>
    <id>http://www.ouyang.xin/2019/12/15/TopicModel简单指北/</id>
    <published>2019-12-15T15:44:48.000Z</published>
    <updated>2019-12-23T16:31:12.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Topic-Model-简单指北"><a href="#Topic-Model-简单指北" class="headerlink" title="Topic Model 简单指北"></a>Topic Model 简单指北</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>说起来好久没有回顾topic model了，刚好借此机会重温一下。这里推荐久远之前看过的一个系列，<a href="http://www.52nlp.cn/category/topic-model" target="_blank" rel="noopener">想看戳我</a> 。</p><p>topic model本质是计算词与文档相似度的一种方法，在序列模型未普及的时候以至于现在，仍然是一种简单而高效的方法，但由于本人并不是topicmodel出身，故本篇也仅仅基于个人理解，仅做入门参考～</p><p>若有问题，请联系本人互怼。</p><h2 id="1-主题模型之前"><a href="#1-主题模型之前" class="headerlink" title="1 主题模型之前"></a>1 主题模型之前</h2><p>主题模型在搞啥？</p><p>文档中的topic结构，文档和topic的相似度，doclist和topic的相似度。</p><p>词-词、词-文档、文档-词的相似度。</p><h2 id="2-TFIDF"><a href="#2-TFIDF" class="headerlink" title="2 TFIDF"></a>2 TFIDF</h2><blockquote><p>我们要优化这个井盖。</p><p>​                 ——安神</p></blockquote><p>那么首先说到关键词和相似度，就逃不开TFIDF。</p><p>TFIDF（Term Frequency/Inverse Document Frequency）简单讲就是一个词在一个语料库单个文档的重要程度。</p><p>其中TF指词频：<br>$$<br>tf_{i,j} = \frac{n_{i,j}}{\sum_k n_{k,j}}<br>$$<br>其中$n_{i,j}$ 表示词i在文档j中出现的次数，normalization是为了防止文档长度对词出现概率的影响（越长则词越容易出现）  </p><p>IDF则指该词在多少文档中出现过：<br>$$<br>idf_i = log\frac{|D|}{|d, t_i \in d_j|}<br>$$  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Topic-Model-简单指北&quot;&gt;&lt;a href=&quot;#Topic-Model-简单指北&quot; class=&quot;headerlink&quot; title=&quot;Topic Model 简单指北&quot;&gt;&lt;/a&gt;Topic Model 简单指北&lt;/h1&gt;&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="NLP,主题模型" scheme="http://www.ouyang.xin/tags/NLP-%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>双系统mbr分区grub引导启动问题解决指北</title>
    <link href="http://www.ouyang.xin/2017/03/25/%E5%8F%8C%E7%B3%BB%E7%BB%9Fmbr%E5%88%86%E5%8C%BAgrub%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%8C%87%E5%8C%97/"/>
    <id>http://www.ouyang.xin/2017/03/25/双系统mbr分区grub引导启动问题解决指北/</id>
    <published>2017-03-25T12:15:46.000Z</published>
    <updated>2018-11-04T16:28:35.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>相信有很多人和我一样，喜欢用linux敲代码和工作，却抵挡不了windows的诱（you）惑（xi）而选择了双系统（买mac的壕们请无视）。<br>那么问题就来了，很多时候由于安装不当，启动时只能找到一个系统，所以在此列举一些应对措施。  </p><a id="more"></a><h2 id="安装linux启动不了windows"><a href="#安装linux启动不了windows" class="headerlink" title="安装linux启动不了windows"></a>安装linux启动不了windows</h2><p>大部分linux启动文件都使用grub或grub2。如果安装双系统后启动电脑启动不了windows，可以进入linux修复引导。<br>进入linux，使用如下命令即可更新grub自动找回启动项：<code>sudo update-grub2</code>，之后重启电脑即可。</p><h2 id="双系统误操作黑屏找不到分区"><a href="#双系统误操作黑屏找不到分区" class="headerlink" title="双系统误操作黑屏找不到分区"></a>双系统误操作黑屏找不到分区</h2><h3 id="PE启动"><a href="#PE启动" class="headerlink" title="PE启动"></a>PE启动</h3><ul><li>下载老毛桃或者大白菜</li><li>u盘启动（F12 或其他）进入dg分区管理</li><li>修复主分区mbr，即可重新引导</li><li>咳咳，一般没用</li></ul><h3 id="linux-liveCD启动"><a href="#linux-liveCD启动" class="headerlink" title="linux liveCD启动"></a>linux liveCD启动</h3><ul><li>下载liveCD linux从u盘启动进入系统</li><li><code>sudo -i</code>以下命令都要在root权限下执行</li><li><code>fdisk -l</code>查看硬盘分区，找到/和/boot分区号（如/dev/sda1 /dev/sda2)</li><li><code>mount /dev/sda1 /mnt</code> <code>mount /dev/sda2/ /mnt/boot</code>挂载这两个分区</li><li>在硬盘重建mbr分区表，执行以下命令 <code>gurb2-install --root-directory=/dev/sda</code> PS.这里路径是硬盘号，不是分区号</li><li>重启～</li></ul><h3 id="grub-rescue"><a href="#grub-rescue" class="headerlink" title="grub rescue"></a>grub rescue</h3><p>win+linux双系统下若进行重装linux，修改硬盘分区等操作时可能会出现启动电脑黑屏，提示无法找到分区，此时会进入类似shell的grub rescue界面。<br>这个模式命令只有<code>ls</code>,<code>set</code>,<code>insmod</code>,<code>root</code>,<code>prefix</code>,<code>normal</code>等可用。<br>如果linux系统还在，那么还有救，步骤如下:</p><ul><li><code>ls</code>查看硬盘信息，如(h0,msdos1)既为一个分区</li><li><code>ls (hd0,msdos1)/boot/grub/</code>或<code>ls (hd0,msdos1)/grub/</code>找寻存放grub的boot分区</li><li><code>set root=(hd0,msdos1)</code>设置该分区为root</li><li><code>set prefix=(hd0,msdos1)/boot/grub</code>设置启动项</li><li><code>insmode normal</code>进入grub菜单，如果成功，即可进入linux系统</li><li>照第一节内容更新grub，即可解决问题</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只说到了MBR分区下的启动问题，当然GPT分区启动也可能会出现问题，总之安装双系统坑很多。<br>以后也许可以抽空写一下分区表和启动的区别，当然得有空。希望实验顺利～</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;相信有很多人和我一样，喜欢用linux敲代码和工作，却抵挡不了windows的诱（you）惑（xi）而选择了双系统（买mac的壕们请无视）。&lt;br&gt;那么问题就来了，很多时候由于安装不当，启动时只能找到一个系统，所以在此列举一些应对措施。  &lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.ouyang.xin/categories/Linux/"/>
    
      <category term="其他" scheme="http://www.ouyang.xin/categories/Linux/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Linux" scheme="http://www.ouyang.xin/tags/Linux/"/>
    
      <category term="grub" scheme="http://www.ouyang.xin/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>Fedora24 解决搜狗拼音输入法不能用问题</title>
    <link href="http://www.ouyang.xin/2017/03/22/Fedora24-%E8%A7%A3%E5%86%B3%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8D%E8%83%BD%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://www.ouyang.xin/2017/03/22/Fedora24-解决搜狗拼音输入法不能用问题/</id>
    <published>2017-03-22T08:11:15.000Z</published>
    <updated>2018-11-04T16:28:35.302Z</updated>
    
    <content type="html"><![CDATA[<p>自从用了Fedora， 各种问题层出不穷，可能是我的水平还不够吧，革命继续～  </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这回碰到的问题是，搜狗拼音可以加载，但是输入时只出一个小框，不能打出汉字。查了很多原因无果，最后在搜狗社区找到了解决方案。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>原链接见<a href="http://pinyin.sogou.com/bbs/forum.php?mod=viewthread&amp;tid=2681098&amp;extra=page%3D1" target="_blank" rel="noopener">这里</a><br>删除用户目录下<code>./config</code>的三个文件夹即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SogouPY</span><br><span class="line">SogouPY.users</span><br><span class="line">sogou-qimpanel</span><br></pre></td></tr></table></figure></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>虽然解决了问题，但是还是没找到问题具体出在哪里，可能是配置文件问题，也可能是F24更新出现的依赖库不兼容问题。<br>还有一个问题就是输入法经常会当掉，等论文忙完了要好好研究一下了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从用了Fedora， 各种问题层出不穷，可能是我的水平还不够吧，革命继续～  &lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;这回碰到的问题是，搜狗拼音可以加载，但是输入
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.ouyang.xin/categories/Linux/"/>
    
      <category term="Fedora" scheme="http://www.ouyang.xin/categories/Linux/Fedora/"/>
    
    
      <category term="Linux" scheme="http://www.ouyang.xin/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java: 构造器相关</title>
    <link href="http://www.ouyang.xin/2017/01/18/Effective-Java-%E6%9E%84%E9%80%A0%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://www.ouyang.xin/2017/01/18/Effective-Java-构造器相关/</id>
    <published>2017-01-18T05:09:46.000Z</published>
    <updated>2018-11-04T16:28:35.302Z</updated>
    
    <content type="html"><![CDATA[<p>整理自我的Wiz笔记  </p><hr><h1 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h1><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>仅仅被实例化一次的类，通常被用来代表那些本质上唯一的系统组件，比如窗口管理器或者文件系统。<br>java1.5之后，有三种方式实现singleton。</p><h3 id="Singleton-with-public-final-field"><a href="#Singleton-with-public-final-field" class="headerlink" title="Singleton with public final field"></a>Singleton with public final field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用一次private 构造器，实例化公有的静态final域Elvis.INSTANCE。<br><strong>特权客户端可以借助AccessibleObject.setAccessible，通过反射机制调用私有构造器！</strong><br><a id="more"></a></p><h3 id="Singleton-with-static-factory"><a href="#Singleton-with-static-factory" class="headerlink" title="Singleton with static factory"></a>Singleton with static factory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> INSTANCE;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的优势在于，提供了灵活性。  </p><h3 id="Enum-Singleton"><a href="#Enum-Singleton" class="headerlink" title="Enum Singleton"></a>Enum Singleton</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法更加简洁，并提供了序列化机制。<strong>单元素的枚举类型已经成为实现Singleton的最佳方法！</strong>  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据面神的经验,<strong>在公司中为了可读性和其他原因仍然会选择使用静态类来实现，不会选择枚举类型。</strong>  </p><hr><h1 id="遇到多个构造器参数时要考虑用构建器"><a href="#遇到多个构造器参数时要考虑用构建器" class="headerlink" title="遇到多个构造器参数时要考虑用构建器"></a>遇到多个构造器参数时要考虑用构建器</h1><h2 id="重叠构造器"><a href="#重叠构造器" class="headerlink" title="重叠构造器"></a>重叠构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>  servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>     servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>     calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>          fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>       sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span> carbohydrate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize  = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings     = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories     = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat          = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium       = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>当有许多参数的适合，客户端代码会很难编写，并且仍然较难以阅读。  </p><h2 id="javaBeans"><a href="#javaBeans" class="headerlink" title="javaBeans"></a>javaBeans</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servings = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServings</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; servingSize = val;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>构造过程中可能<strong>处于不一致的状态</strong>，也就是说线程不安全。</p><h2 id="builder-Pattern-构建器"><a href="#builder-Pattern-构建器" class="headerlink" title="builder Pattern (构建器)"></a>builder Pattern (构建器)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; calories = val; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; fat = val; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; sodium = val; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; carbohydrate = val; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts3(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优雅的构建！！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</span><br><span class="line">.calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br></pre></td></tr></table></figure></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>静态工厂和构造器有一个局限性，都不能很好的扩展到大量可选参数。一共有三个方法可以用于构造有<strong>大量</strong>可选构造函数的类的实例。<br>如果类的构造器或者静态工厂中具有多个参数，Builder模式就是一种不错的选择。<strong>但是在某些十分注重性能的情况下，可能就会成为问题</strong>  </p><hr><h1 id="通过私有构造器强化不可实例化的能力"><a href="#通过私有构造器强化不可实例化的能力" class="headerlink" title="通过私有构造器强化不可实例化的能力"></a>通过私有构造器强化不可实例化的能力</h1><p>有时候想只写一个包含静态方法的类，又不想实例化，<strong>通过将类做成抽象类来强制该类不可被实例化是行不通的。</strong><br>这个时候,让它包含私有构造器即可!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理自我的Wiz笔记  &lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;a href=&quot;#用私有构造器或者枚举类型强化Singleton属性&quot; class=&quot;headerlink&quot; title=&quot;用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;/a&gt;用私有构造器或者枚举类型强化Singleton属性&lt;/h1&gt;&lt;h2 id=&quot;Singleton&quot;&gt;&lt;a href=&quot;#Singleton&quot; class=&quot;headerlink&quot; title=&quot;Singleton&quot;&gt;&lt;/a&gt;Singleton&lt;/h2&gt;&lt;p&gt;仅仅被实例化一次的类，通常被用来代表那些本质上唯一的系统组件，比如窗口管理器或者文件系统。&lt;br&gt;java1.5之后，有三种方式实现singleton。&lt;/p&gt;
&lt;h3 id=&quot;Singleton-with-public-final-field&quot;&gt;&lt;a href=&quot;#Singleton-with-public-final-field&quot; class=&quot;headerlink&quot; title=&quot;Singleton with public final field&quot;&gt;&lt;/a&gt;Singleton with public final field&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Elvis&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Elvis INSTANCE = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Elvis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Elvis&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leaveTheBuilding&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用一次private 构造器，实例化公有的静态final域Elvis.INSTANCE。&lt;br&gt;&lt;strong&gt;特权客户端可以借助AccessibleObject.setAccessible，通过反射机制调用私有构造器！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.ouyang.xin/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Effective Java" scheme="http://www.ouyang.xin/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Effective-Java/"/>
    
    
      <category term="Java" scheme="http://www.ouyang.xin/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>python 生成器小插曲</title>
    <link href="http://www.ouyang.xin/2017/01/17/python-%E7%94%9F%E6%88%90%E5%99%A8%E5%B0%8F%E6%8F%92%E6%9B%B2/"/>
    <id>http://www.ouyang.xin/2017/01/17/python-生成器小插曲/</id>
    <published>2017-01-17T12:15:49.000Z</published>
    <updated>2018-11-04T16:28:35.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>对分词后的words迭代两次保存文件，但是结果程序只执行第一次的迭代，如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">words = pseg.cut(i)</span><br><span class="line"><span class="keyword">for</span> word,flag <span class="keyword">in</span> list(words):</span><br><span class="line">    test.write(<span class="string">'%s %s\n'</span> % (word, flag))</span><br><span class="line"><span class="keyword">for</span> word, flag <span class="keyword">in</span> list(words):</span><br><span class="line">    train.write(<span class="string">'%s %s I-P\n'</span> % (word, flag))</span><br></pre></td></tr></table></figure><p>逐步调试后发现，第二次for循环words已经为空，没有重新遍历。结巴cut生成的是generator而不是list和字典，<strong>通过for循环generator只能遍历一次</strong>！<br><a id="more"></a></p><h1 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>generator是一种边计算，边循环机制的迭代器，这样可以减少大量数据下list占用的大量内存。也就是说，generator在需要时返回中间值，保存当前状态，等待下一次返回要求。 关键字yield，在程序调用generator时，函数执行到yield时会被挂起，等待下一次调用。</p><blockquote><p>PEP255: A python generator is a kind of python iterator, but of an especially powerful kind.</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><p>括号直接生成  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li><li><p>构造函数，并且把其中print改为yield，这样该函数返回的就是一个生成器  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">range</span><span class="params">(cnt)</span>:</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; cnt:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ol><li>next()或者for循环遍历generator，当next ()调用到最后一次之后，会抛出异常。</li><li>send()用来发送信息，这里会将阻塞住的yield的值换成sent()发送的值。</li><li>close()用来关闭generator</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想让结巴生成list请用<code>jieba.lcut()</code>!!!<br>当然generator还有更有趣的用法,待日后发掘更新~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;对分词后的words迭代两次保存文件，但是结果程序只执行第一次的迭代，如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;words = pseg.cut(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; word,flag &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list(words):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test.write(&lt;span class=&quot;string&quot;&gt;&#39;%s %s\n&#39;&lt;/span&gt; % (word, flag))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; word, flag &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list(words):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    train.write(&lt;span class=&quot;string&quot;&gt;&#39;%s %s I-P\n&#39;&lt;/span&gt; % (word, flag))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;逐步调试后发现，第二次for循环words已经为空，没有重新遍历。结巴cut生成的是generator而不是list和字典，&lt;strong&gt;通过for循环generator只能遍历一次&lt;/strong&gt;！&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.ouyang.xin/categories/python/"/>
    
      <category term="基础" scheme="http://www.ouyang.xin/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.ouyang.xin/tags/python/"/>
    
  </entry>
  
</feed>
